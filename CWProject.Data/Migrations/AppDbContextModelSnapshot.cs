// <auto-generated />
using System;
using CWProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CWProject.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CWProject.Models.Models.Amenities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VillasId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VillasId");

                    b.ToTable("Amenities");
                });

            modelBuilder.Entity("CWProject.Models.Models.LocationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LocationTypes");
                });

            modelBuilder.Entity("CWProject.Models.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CWProject.Models.Models.VillaAmenities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AmenitiesId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VillasId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AmenitiesId");

                    b.HasIndex("VillasId");

                    b.ToTable("VillaAmenities");
                });

            modelBuilder.Entity("CWProject.Models.Models.Villas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PricePerNight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Villas");
                });

            modelBuilder.Entity("CWProject.Models.Models.Amenities", b =>
                {
                    b.HasOne("CWProject.Models.Models.Villas", null)
                        .WithMany("Amenities")
                        .HasForeignKey("VillasId");
                });

            modelBuilder.Entity("CWProject.Models.Models.VillaAmenities", b =>
                {
                    b.HasOne("CWProject.Models.Models.Amenities", "Amenities")
                        .WithMany("VillaAmenities")
                        .HasForeignKey("AmenitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CWProject.Models.Models.Villas", "Villas")
                        .WithMany("VillaAmenities")
                        .HasForeignKey("VillasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Amenities");

                    b.Navigation("Villas");
                });

            modelBuilder.Entity("CWProject.Models.Models.Villas", b =>
                {
                    b.HasOne("CWProject.Models.Models.LocationType", "LocationType")
                        .WithMany("Villas")
                        .HasForeignKey("LocationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CWProject.Models.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LocationType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CWProject.Models.Models.Amenities", b =>
                {
                    b.Navigation("VillaAmenities");
                });

            modelBuilder.Entity("CWProject.Models.Models.LocationType", b =>
                {
                    b.Navigation("Villas");
                });

            modelBuilder.Entity("CWProject.Models.Models.Villas", b =>
                {
                    b.Navigation("Amenities");

                    b.Navigation("VillaAmenities");
                });
#pragma warning restore 612, 618
        }
    }
}
